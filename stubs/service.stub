<?php

declare(strict_types=1);

namespace {{ namespace }};

{{ modelImport }}
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;

class {{ serviceName }}Service
{
    /**
     * Items per page for pagination
     */
    protected int $per_page = 10;

    /**
     * Get paginated results with search and filters
     *
     * @param array $filters
     * @param string $search
     * @param string $sort_by
     * @param string $sort_direction
     * @param int|null $per_page
     * @return LengthAwarePaginator
     */
    public function getPaginated(
        array $filters = [],
        string $search = '',
        string $sort_by = 'id',
        string $sort_direction = 'desc',
        ?int $per_page = null
    ): LengthAwarePaginator {
        $query = {{ modelClass }}::query();

        // Apply search
        if (!empty($search)) {
            $query->where(function ($q) use ($search) {
                $q->whereRaw('lower(name) like lower(?)', ['%' . strtolower($search) . '%']);
                // Add more searchable fields as needed
            });
        }

        // Apply filters
        foreach ($filters as $field => $value) {
            if (!empty($value)) {
                if (is_array($value)) {
                    $query->whereIn($field, $value);
                } else {
                    $query->where($field, $value);
                }
            }
        }

        // Apply sorting
        $query->orderByRaw("LOWER({$sort_by}) {$sort_direction}");

        return $query->paginate($per_page ?? $this->per_page);
    }

    /**
     * Get all active records
     *
     * @param int|null $company_id
     * @return Collection
     */
    public function getActive(?int $company_id = null): Collection
    {
        $query = {{ modelClass }}::where('status', 'A');

        if ($company_id) {
            $query->where('company_id', $company_id);
        }

        return $query->get();
    }

    /**
     * Find by ID
     *
     * @param int $id
     * @return {{ modelClass }}|null
     */
    public function findById(int $id): ?{{ modelClass }}
    {
        return {{ modelClass }}::find($id);
    }

    /**
     * Find by field
     *
     * @param string $field
     * @param mixed $value
     * @param int|null $company_id
     * @return {{ modelClass }}|null
     */
    public function findBy(string $field, $value, ?int $company_id = null): ?{{ modelClass }}
    {
        $query = {{ modelClass }}::where($field, $value);

        if ($company_id) {
            $query->where('company_id', $company_id);
        }

        return $query->first();
    }

    /**
     * Create new record
     *
     * @param array $data
     * @return {{ modelClass }}
     */
    public function create(array $data): {{ modelClass }}
    {
        return {{ modelClass }}::create($data);
    }

    /**
     * Update record
     *
     * @param int $id
     * @param array $data
     * @return {{ modelClass }}|null
     */
    public function update(int $id, array $data): ?{{ modelClass }}
    {
        $record = $this->findById($id);

        if ($record) {
            $record->update($data);
            return $record->fresh();
        }

        return null;
    }

    /**
     * Delete record
     *
     * @param int $id
     * @return bool
     */
    public function delete(int $id): bool
    {
        $record = $this->findById($id);

        return $record ? $record->delete() : false;
    }

    /**
     * Get temporary URL for file
     *
     * @param string|null $path
     * @param int $minutes
     * @return string|null
     */
    public function getTemporaryUrl(?string $path, int $minutes = 120): ?string
    {
        if (!$path) {
            return null;
        }

        return Storage::disk('s3')->temporaryUrl($path, Carbon::now()->addMinutes($minutes));
    }
}
